name: Store CD

on:
  push:
    tags:
      - "v*"

jobs:
  # CD
  deploy_android:
    name: Android PlayStore
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '1.8'
      - name: Decrypt Android keys
        run: sh ./.github/scripts/decrypt_android_keys.sh
        env:
          ANDROID_KEYS_SECRET_PASSPHRASE: ${{ secrets.ANDROID_KEYS_SECRET_PASSPHRASE }}
      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '1.26.x' # you can use 1.12
          channel: 'beta'
      - name: Install Flutter dependencies
        run: flutter pub get
      - run: flutter build appbundle --release
      - name: Setup ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.7.2'
      - name: Bundle update
        run: bundle update --bundler
        working-directory: ./android
      - name: Run Fastlane
        uses: maierj/fastlane-action@v2.0.1
        with:
          lane: 'beta'
          subdirectory: 'android'

  deploy_windows:
    name: Windows App
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run Flutter tasks
        uses: subosito/flutter-action@v1
        with:
          channel: 'dev'
      - name: Upgrades flutter
        run: flutter upgrade
      - name: Enable windows
        run: flutter config --enable-windows-desktop
      - run: flutter doctor -v
      - run: flutter pub get
      - name: Build windows
        run: flutter build windows --release
      - name: 'Zip files'
        run: powershell Compress-Archive build\windows\runner\Release\ windows.zip
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-artifact
          path: windows.zip

  github_release:
    name: Create GitHub Release
    needs: [deploy_android, deploy_windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: RELEASE_NOTE.md
          draft: false
          prerelease: false
      - name: Use Download Artifact v2
        uses: actions/download-artifact@v2
        with:
          name: windows-artifact
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./windows.zip
          asset_name: windows.zip
          asset_content_type: application/zip